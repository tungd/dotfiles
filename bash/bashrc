export LC_CTYPE=en_US.UTF-8
#export TERM="xterm-265color"

# Colors
export CLICOLOR=1
export NC='\033[0m'
export WHITE='\033[1;37m'
export BLACK='\033[0;30m'
export BLUE='\033[0;34m'
export LIGHT_BLUE='\033[1;34m'
export GREEN='\033[0;32m'
export LIGHT_GREEN='\033[1;32m'
export CYAN='\033[0;36m'
export LIGHT_CYAN='\033[1;36m'
export RED='\033[0;31m'
export LIGHT_RED='\033[1;31m'
export PURPLE='\033[0;35m'
export LIGHT_PURPLE='\033[1;35m'
export YELLOW='\033[0;33m'
export LIGHT_YELLOW='\033[1;33m'
export GRAY='\033[1;30m'
export LIGHT_GRAY='\033[0;37m'
export END='\033[m'
export BOLD='\033[1m'


# History
export HISTCONTROL=ignoredups
export HISTFILESIZE=3000
export HISTIGNORE="ls:cd:[bf]g:exit:..:...:ll:lla"
alias h=history
hf() {
  grep "$@ $HOME/.bash_history"
}

function xtitle {
  unset PROMPT_COMMAND
  echo -ne "\033]0;$1\007"
}

# git prompt
function git_prompt_info() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  if [[ -n $(git status -s --ignore-submodules=dirty 2> /dev/null) ]]; then
      echo -ne "$RED+"
  fi
  echo -e "[${ref#refs/heads/}:$(git_prompt_short_sha)] $END"
}

function git_prompt_short_sha() {
  sha=$(git rev-parse --short HEAD 2> /dev/null) && echo "$sha"
}

export PS1="\[\033[G\]
$RED\u$END@$YELLOW\H$END in $GREEN\w$END \$(git_prompt_info)
â€º "

export SBT_OPTS="-XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M"
export LOCAL=$HOME/.local
export PATH=$LOCAL/bin:$LOCAL/sbin:$PATH

export GOPATH=$HOME/Projects/go
export PATH=$GOPATH/bin:$LOCAL/opt/go/libexec/bin:$PATH

export PYENV_ROOT=/Users/tung/.local/var/pyenv
export PYTHONUNBUFFERED=1

# export PIP_USER_BASE=$HOME/Library/Python/2.7
# export PATH=$PIP_USER_BASE/bin:$PATH

export RBENV_HOME=$HOME/.rbenv
export PATH=$RBENV_HOME/bin:$PATH

export ANDROID_HOME=/Users/tung/.local/opt/android-sdk
export PATH=$ANDROID_HOME/bin:$PATH

export AIRPORT_HOME=/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources
export PATH=$AIRPORT_HOME:$PATH

alias g=git
alias be='bundle exec'
alias grep='grep --color=auto'
alias tmux='TERM=xterm-256color tmux'
alias v='./venv/bin/'

if [ -f $LOCAL/etc/bash_completion ]; then
    . $LOCAL/etc/bash_completion
fi

ve() {
  exec "./venv/bin/$*"
}

# Tools
faviconize() {
  favicon=favicon

  # if [[ ! -z $BW ]]; then
  #     bw="-colors 256 PNG8:"
  # fi

  imagemagick_opts="-filter Triangle -define filter:support=2 -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB"

  sizes=("16x16" "32x32" "48x48" "64x64" "144x144")
  for size in "${sizes[@]}"; do
    convert $1 $imagemagick_opts -thumbnail $size "$bw$favicon$size.png" && optipng -o9 -strip all "favicon$size.png"
  done

  icos="favicon16x16.png favicon32x32.png favicon48x48.png favicon64x64.png"
  # convert $icos -colors 256 favicon.ico
  convert $icos favicon.ico
  rm $icos
}

if [ -d "/Applications/VMware Fusion.app/Contents/Library" ]; then
    export PATH=$PATH:"/Applications/VMware Fusion.app/Contents/Library"
fi

# rbenv
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# pyenv
if which pyenv > /dev/null; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

# docker
# if which docker-machine > /dev/null; then eval $(docker-machine env dev); fi

# autoenv
# source $LOCAL/opt/autoenv/activate.sh

complete -C aws_completer aws

if [ -f "~/.iterm2_shell_integration.$(basename $SHELL)" ]; then
    source ~/.iterm2_shell_integration.`basename $SHELL`
fi

# z
[[ -s $(brew --prefix)/etc/profile.d/z.sh ]] && . $(brew --prefix)/etc/profile.d/z.sh
