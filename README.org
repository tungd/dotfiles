#+title: macOS Setup

* Bootstrap

** Install my SSH and GPG keys

** Fix macOS Sierra =ssh-agent= issue

#+BEGIN_SRC sh
  cat >> ~/.ssh/config <<EOF
  Host *
      IdentityFile ~/.ssh/id_rsa
      AddKeysToAgent yes
  EOF
#+END_SRC

** Clone the dotfiles

#+BEGIN_SRC sh
  mkdir -p ~/Projects
  git clone git@github.com:tungd/dotfiles-lean.git ~/Projects/dotfiles
#+END_SRC

** Making aliases

#+BEGIN_SRC sh
  mkdir -p ~/.local/bin
  mkdir -p ~/.local/vendor

  ln -s ~/Projects/dotfiles/.bash_profile ~/.bash_profile
  ln -s ~/Projects/dotfiles/.bashrc ~/.bashrc
  ln -s ~/Projects/dotfiles/.emacs.d ~/.emacs.d
  ln -s ~/Projects/dotfiles/.gitconfig ~/.gitconfig
  ln -s ~/Projects/dotfiles/.npmrc ~/.npmrc
  ln -s ~/Projects/dotfiles/.eslintrc ~/.eslintrc
#+END_SRC


* Install apps and utilities

** XCode

#+BEGIN_SRC sh
  xcode-select --install
#+END_SRC

** =macports=

I don't use Homebrew, it is too fragile and invasive for my taste. I tried Nix
but it's not ready for prime time yet. Deal breaker for me is a long standing
issue regarding =watchman= (https://github.com/NixOS/nixpkgs/issues/14309).

I tried =pkgsrc=, it was great but the number of packages are so limited, and
updates were so infrequent. I now settled down with MacPorts. It is simple, pretty
similar to =apt= and =yum=, supports package version pining and has all of the
packages that I need. It's also not updated too frequently like
Homebrew. Installation is a little bit more involved, though.

#+BEGIN_SRC sh
  # the general stuffs
  sudo port install aria2 aspell aspell-dict-en automake autoconf openssl
  sudo port install watchman sqlite3 ripgrep tree libxml2 lcms2
  sudo port install nodejs14 npm6 yarn python3.8 py38-pip postgresql11 terraform-0.12

  # for building Emacs
  sudo port install texinfo gnutls jansson
#+END_SRC

** =stack=

#+BEGIN_SRC sh
  curl -sSL https://get.haskellstack.org/ | sh -s - -d ~/.local/bin/
#+END_SRC

#+BEGIN_SRC sh
  cat > ~/.stack/config.yaml <<EOF
  templates:
    params:
      author-name: Tung Dao
      author-email: me@tungdao.com
      copyright: (c) 2019 Tung Dao
      github-username: tungd
  EOF
#+END_SRC

** Poetry

#+begin_src sh
  curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3.8 -
#+end_src

** =z.sh=

=z.sh= (https://github.com/rupa/z) allows me to visit one of the directories I
worked on recently by typing just a partial path of it.

#+BEGIN_SRC sh
  curl -L https://raw.githubusercontent.com/rupa/z/master/z.sh > ~/.local/vendor/z.sh
#+END_SRC

** =direnv=

Automatically set environment variable per directory.

#+BEGIN_SRC sh
  curl -L -o ~/.local/bin/direnv https://github.com/direnv/direnv/releases/download/v2.20.0/direnv.darwin-amd64
  chmod +x ~/.local/bin/direnv
#+END_SRC

** =terraform=

Declarative infrastructure management

#+BEGIN_SRC sh
  curl -L -o /tmp/terraform_0.12.17_darwin_amd64.zip https://releases.hashicorp.com/terraform/0.12.17/terraform_0.12.17_darwin_amd64.zip
  unzip /tmp/terraform_0.12.17_darwin_amd64.zip
  mv terraform ~/.local/bin
#+END_SRC


* System configuration

** Keyboard configuration

Decrease repeat delay, increase repeat rate and disable Emoji.

#+BEGIN_SRC sh
  defaults write -g ApplePressAndHoldEnabled -bool false
  # defaults write -g InitialKeyRepeat -int 10
  defaults write -g KeyRepeat -int 1
  defaults write -g NSUserKeyEquivalents -dict-add 'Emoji & Symbols' '@^j'
#+END_SRC

** No shadow on window capture (Cmd-S-4 SPC)

#+BEGIN_SRC sh
  defaults write com.apple.screencapture disable-shadow -bool true
#+END_SRC

** Restart the UI Server service to activate the changes

#+BEGIN_SRC sh
  killall SystemUIServer
#+END_SRC

* Installing Emacs with native compilation

There is a recent development in Emacs that enables compilation of Emacs Lisp
into native machine code and load dynamically, bringing substantial speed
improvement. It is pretty stable and is intended be include with Emacs 28 release.

Unfortunately, the installation process is still not straight forward as it
should be. On top of that, most, if not all, of the tutorials on the Internet
was using Homebrew, mentions of Macports was non-existent. Following is my
experience installing it on my macOS Catalina 10.15.7.

Fortunately, the GCC10 comes with Macports was updated to include the feature
required for Emacs's native compilation (GCC JIT feature) since Sep 2020. All we
need to do is install ~gcc10~ through Macports.

Another thing is that the ~install~ utility on macOS doesn't support the ~-D~
option used by the Emacs install script, so we will need to install the
~coreutils~ package, which contains the GNU implementation of ~install~, which
does support ~-D~.

#+begin_src sh
  sudo port install coreutils gcc10
#+end_src

There are many different ways to build standalone Emacs.app on macOS, the
easiest being the ~build-emacs-for-macos~ script provided by ~jimeh~, which is
also being used to built the binaries on https://emacsformacosx.com.

#+begin_src sh
  git clone git@github.com:jimeh/build-emacs-for-macos.git
  cd build-emacs-for-macos
#+end_src

The script, however, is using Homebrew. We will need to patch it to be
compatible with Macports. Following is the patch.

#+begin_src diff
  diff --git a/build-emacs-for-macos b/build-emacs-for-macos
  index 7f34a2d..622a428 100755
  --- a/build-emacs-for-macos
  +++ b/build-emacs-for-macos
  @@ -123,7 +123,7 @@ class Build
     end

     def gcc_dir
  -    @gcc_dir ||= `brew --prefix gcc`.chomp
  +    "/opt/local"
     end

     def extra_libs
  @@ -213,8 +213,8 @@ class Build

     def gcc_library_paths
       @gcc_library_paths ||= Dir[
  -      "#{gcc_dir}/lib/gcc/*",
  -      "#{gcc_dir}/lib/gcc/*/gcc/*apple-darwin*/*"
  +      "#{gcc_dir}/lib/gcc10",
  +      "#{gcc_dir}/lib/gcc10/gcc/*apple-darwin*/*"
       ].sort_by { |p| [p.size, p] }
     end

  @@ -253,7 +253,7 @@ class Build
           apply_native_comp_env_setup_patch(source)

           ENV['CFLAGS'] = [
  -          "-I#{gcc_dir}/include",
  +          "-I#{gcc_dir}/include/gcc10",
             '-O2',
             '-march=native'
           ].compact.join(' ')
  @@ -270,21 +270,7 @@ class Build
         end

         ENV['CC'] = 'clang'
  -      ENV['PKG_CONFIG_PATH'] = [
  -        "#{brew_dir}/lib/pkgconfig",
  -        "#{brew_dir}/share/pkgconfig",
  -        "#{brew_dir}/opt/expat/lib/pkgconfig",
  -        "#{brew_dir}/opt/libxml2/lib/pkgconfig",
  -        "#{brew_dir}/opt/ncurses/lib/pkgconfig",
  -        "#{brew_dir}/opt/zlib/lib/pkgconfig",
  -        "#{brew_dir}/Homebrew/Library/Homebrew/os/mac/pkgconfig/#{OS.version}",
  -        ENV['PKG_CONFIG_PATH']
  -      ].compact.join(':')

         ENV['PATH'] = [
  -        "#{brew_dir}/opt/make/libexec/gnubin",
  -        "#{brew_dir}/opt/coreutils/libexec/gnubin",
  -        "#{brew_dir}/opt/gnu-sed/libexec/gnubin",
  -        "#{brew_dir}/bin",
  -        "#{brew_dir}/opt/texinfo/bin",
  +        "/opt/local/libexec/gnubin",
           ENV['PATH']
         ].compact.join(':')
#+end_src

What we are doing here is that:

- Replace the path to GCC to the correct one installed by Macports
- Removing references to ~brew_dir~. It was needed for Homebrew since each of
  the libraries was installed into a different root, breaking ~pkgconfig~, which
  was used to discovery the dependencies. ~pkgconfig~ works nicely with
  Macports, so this isn't needed.
- Similarly, modify the ~PATH~ environment variable with the GNU ~coreutils~,
  prioritizing GNU ~install~ utility over the one comes with macOS.

And that's it. I can now run:

#+begin_src sh
  ./build-emacs-for-macos --git-sha dc0cf16c7a60f36aafcf9b56513a855cefa7e1ad feature/native-comp
#+end_src

and enjoy the result. Here you can see, the benefit of using this script over
installing from source is that we can easily specify the branch/commit and the
features we want to build with.
