#!/usr/bin/env python3
"""
Poor man's docker-compose, using VMWare Fusion's vctl.

Recently, I've been looking into alternatives such as libvirt, QEmu and even
hyxve, since Docker for Mac has become unbearable with its resource usage. The
problem with those tools is that while they do work, networking and file sharing
is still a pain in the as. The best I've got was to run a process listening to
containers start/stop events and create SSH tunneling processes for the exposed
ports on the flight. It is not very reliable, and file sharing still sucks.

The good news is, since version 12 VMWare Fusion support running OSI containers,
with working networking. If you're running Kubernetes based config then it would
be perfect. However, docker-compose.yml files are still vastly superior to
Kubernetes manifests.

This is my attemp to bridge the gap. At the moment, only `up` and `up -d` are
supported.
"""
import sys
import signal
import subprocess
import logging
import asyncio

from pathlib import Path

import yaml


logging.basicConfig(
    format='%(levelname).1s %(name)s: %(message)s',
    stream=sys.stdout, level=logging.INFO
)


class Service(object):
    def __init__(self, name, spec):
        self.name = name
        self.spec = spec
        self.logger = logging.getLogger(self.name)
        self.images = []

    async def start(self):
        await self._pull(self.spec['image'])

        args = self._start_args() if await self._exists() else self._run_args()
        self.logger.debug('args: %s', args)

        process = await asyncio.create_subprocess_exec(
            'vctl', *args,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        await asyncio.wait([
            asyncio.create_task(self._pipe(process.stdout)),
            asyncio.create_task(self._pipe(process.stderr))
        ])

    def _start_args(self):
        return ['start', self.name]

    def _run_args(self):
        args = ['run']
        for envvar in self.spec.get('environment', []):
            args += ['-e', envvar]
        for port in self.spec.get('ports', []):
            args += ['-p', port]
        args += ['-n', self.name, self.spec['image']]
        return args

    async def _exists(self):
        process = await asyncio.create_subprocess_exec(
            'vctl', 'ps', '-a', stdout=asyncio.subprocess.PIPE
        )
        output = await process.stdout.read()
        containers = set([
            line.decode('utf-8').split(' ')[0]
            for line in output.splitlines()
        ])
        return self.name in containers

    async def _pull(self, image):
        if len(self.images) == 0:
            process = await asyncio.create_subprocess_exec(
                'vctl', 'images', stdout=asyncio.subprocess.PIPE
            )
            output = await process.stdout.read()
            self.images = set([
                line.decode('utf-8').split(' ')[0]
                for line in output.splitlines()
            ])

        if image in self.images:
            return

        process = await asyncio.create_subprocess_exec(
            'vctl', 'pull', self.spec['image'],
            # stdout=asyncio.subprocess.PIPE,
            # stderr=asyncio.subprocess.PIPE
        )
        await process.wait()

    async def _pipe(self, stream):
        while True:
            line = await stream.readline()
            if line:
                self.logger.info(line.decode('utf-8').strip())
            else:
                break

    def stop(self):
        self.logger.debug('vctl stop %s', self.name)
        subprocess.run(['vctl', 'stop', self.name], capture_output=True)


if __name__ == '__main__':
    basename = Path('./').absolute().name

    config = Path('./docker-compose.yml')
    assert config.exists(), 'docker-compose.yml not found'

    spec = yaml.safe_load(config.open())
    services = [
        Service('_'.join([basename, name]), service)
        for name, service in spec.get('services', {}).items()
    ]

    loop = asyncio.get_event_loop()

    def _handler(_sig, _frame):
        for service in services:
            service.stop()
        loop.stop()
        sys.exit(0)

    signal.signal(signal.SIGINT, _handler)

    loop.run_until_complete(asyncio.gather(*[
        s.start() for s in services
    ]))
